diff --git a/data/setup.xml b/data/setup.xml
index ae7b2b4..7cf0204 100644
--- a/data/setup.xml
+++ b/data/setup.xml
@@ -216,6 +216,12 @@
 		<item level="0" text="Power LED" description="Turn on the power LED." requires="PowerLED">config.usage.powerLED</item>
 		<item level="0" text="Standby LED" description="Turn on the power LED during standby." requires="StandbyLED">config.usage.standbyLED</item>
 		<item level="0" text="Deep Standby LED" description="Turn on the power LED during deep standby." requires="SuspendLED">config.usage.suspendLED</item>
+		<item level="0" requires="LedPowerColor" text="Operating LED status while running." description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledpowercolor</item>
+		<item level="0" requires="LedStandbyColor" text="Operating LED status in standby mode" description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledstandbycolor</item>
+		<item level="0" requires="LedSuspendColor" text="Operating LED status in deep standby mode" description="With this option you can switch the LED color or deactivate the LED.">config.lcd.ledsuspendcolor</item>
+		<item level="0" requires="Power4x7On" text="Switch off the display during operation." description="With this option you can switch off the display during operation.">config.lcd.power4x7on</item>
+		<item level="0" requires="Power4x7Standby" text="Switch off the display during Standby Mode" description="With this option you can switch off the display in Standby Mode.">config.lcd.power4x7standby</item>
+		<item level="0" requires="Power4x7Suspend" text="Switch off the display during Suspend Mode" description="With this option you can switch off the display in Deep Standby Mode.">config.lcd.power4x7suspend</item>
 		<item level="0" text="Scroll repeats" description="Number of repeating text on display." requires="VFD_scroll_repeats">config.usage.vfd_scroll_repeats</item>
 		<item level="2" text="Scroll delay" description="Delay in miliseconds between scrolling characters on display." requires="VFD_scroll_delay">config.usage.vfd_scroll_delay</item>
 		<item level="2" text="Initial scroll delay" description="Delay in miliseconds before start of scrolling text on display." requires="VFD_initial_scroll_delay">config.usage.vfd_initial_scroll_delay</item>
diff --git a/lib/python/Components/Lcd.py b/lib/python/Components/Lcd.py
index d30a20f..c173bc2 100644
--- a/lib/python/Components/Lcd.py
+++ b/lib/python/Components/Lcd.py
@@ -1,4 +1,4 @@
-from config import config, ConfigSubsection, ConfigSlider, ConfigYesNo, ConfigNothing
+from config import config, ConfigSubsection, ConfigSlider, ConfigYesNo, ConfigNothing, ConfigSelection
 from enigma import eDBoxLCD
 from Components.SystemInfo import SystemInfo
 from Screens.InfoBar import InfoBar
@@ -91,6 +91,42 @@ def InitLcd():
 		config.lcd.flip = ConfigYesNo(default=False)
 		config.lcd.flip.addNotifier(setLCDflipped);
 
+		if SystemInfo["LedPowerColor"]:
+			def setLedPowerColor(configElement):
+				open(SystemInfo["LedPowerColor"], "w").write(configElement.value)
+			config.lcd.ledpowercolor = ConfigSelection(default = "1", choices = [("0", _("off")),("1", _("blue")), ("2", _("red")), ("3", _("violet"))])
+			config.lcd.ledpowercolor.addNotifier(setLedPowerColor)
+
+		if SystemInfo["LedStandbyColor"]:
+			def setLedStandbyColor(configElement):
+				open(SystemInfo["LedStandbyColor"], "w").write(configElement.value)
+			config.lcd.ledstandbycolor = ConfigSelection(default = "3", choices = [("0", _("off")),("1", _("blue")), ("2", _("red")), ("3", _("violet"))])
+			config.lcd.ledstandbycolor.addNotifier(setLedStandbyColor)
+
+		if SystemInfo["LedSuspendColor"]:
+			def setLedSuspendColor(configElement):
+				open(SystemInfo["LedSuspendColor"], "w").write(configElement.value)
+			config.lcd.ledsuspendcolor = ConfigSelection(default = "2", choices = [("0", _("off")),("1", _("blue")), ("2", _("red")), ("3", _("violet"))])
+			config.lcd.ledsuspendcolor.addNotifier(setLedSuspendColor)
+
+		if SystemInfo["Power4x7On"]:
+			def setPower4x7On(configElement):
+				open(SystemInfo["Power4x7On"], "w").write(configElement.value)
+			config.lcd.power4x7on = ConfigSelection(default = "on", choices = [("off", _("Off")), ("on", _("On"))])
+			config.lcd.power4x7on.addNotifier(setPower4x7On)
+
+		if SystemInfo["Power4x7Standby"]:
+			def setPower4x7Standby(configElement):
+				open(SystemInfo["Power4x7Standby"], "w").write(configElement.value)
+			config.lcd.power4x7standby = ConfigSelection(default = "off", choices = [("off", _("Off")), ("on", _("On"))])
+			config.lcd.power4x7standby.addNotifier(setPower4x7Standby)
+
+		if SystemInfo["Power4x7Suspend"]:
+			def setPower4x7Suspend(configElement):
+				open(SystemInfo["Power4x7Suspend"], "w").write(configElement.value)
+			config.lcd.power4x7suspend = ConfigSelection(default = "off", choices = [("off", _("Off")), ("on", _("On"))])
+			config.lcd.power4x7suspend.addNotifier(setPower4x7Suspend)
+
 		if SystemInfo["LcdLiveTV"]:
 			def lcdLiveTvChanged(configElement):
 				setLCDLiveTv(configElement.value)
diff --git a/lib/python/Components/SystemInfo.py b/lib/python/Components/SystemInfo.py
index 28b47df..7742303 100644
--- a/lib/python/Components/SystemInfo.py
+++ b/lib/python/Components/SystemInfo.py
@@ -49,6 +49,12 @@ SystemInfo["PowerLED"] = fileCheck("/proc/stb/power/powerled")
 SystemInfo["StandbyLED"] = fileCheck("/proc/stb/power/standbyled")
 SystemInfo["SuspendLED"] = fileCheck("/proc/stb/power/suspendled")
 SystemInfo["Display"] = SystemInfo["FrontpanelDisplay"] or SystemInfo["StandbyLED"]
+SystemInfo["LedPowerColor"] = fileCheck("/proc/stb/fp/ledpowercolor")
+SystemInfo["LedStandbyColor"] = fileCheck("/proc/stb/fp/ledstandbycolor")
+SystemInfo["LedSuspendColor"] = fileCheck("/proc/stb/fp/ledsuspendledcolor")
+SystemInfo["Power4x7On"] = fileCheck("/proc/stb/fp/power4x7on")
+SystemInfo["Power4x7Standby"] = fileCheck("/proc/stb/fp/power4x7standby")
+SystemInfo["Power4x7Suspend"] = fileCheck("/proc/stb/fp/power4x7suspend")
 SystemInfo["PowerOffDisplay"] = HardwareInfo().get_device_model() not in "formuler1" and fileCheck("/proc/stb/power/vfd") or fileCheck("/proc/stb/lcd/vfd")
 SystemInfo["WakeOnLAN"] = not HardwareInfo().get_device_model().startswith("et8000") and fileCheck("/proc/stb/power/wol") or fileCheck("/proc/stb/fp/wol")
 SystemInfo["HasExternalPIP"] = not (HardwareInfo().get_device_model().startswith("et9") or HardwareInfo().get_device_model() in ('e4hd',)) and fileCheck("/proc/stb/vmpeg/1/external")
