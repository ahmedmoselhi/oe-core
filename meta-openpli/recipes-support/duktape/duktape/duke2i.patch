diff --git a/Makefile b/Makefile
index af064e1..368d836 100644
--- a/Makefile
+++ b/Makefile
@@ -100,25 +100,25 @@ PGO_TEST_SET = \
 	tests/ecmascript/test-regexp-ipv6-regexp.js
 
 # Compiler setup for Linux.
-CC = gcc
-GXX = g++
+CC ?= gcc
+GXX ?= g++
 
 CCOPTS_SHARED =
 CCOPTS_SHARED += -DDUK_CMDLINE_PRINTALERT_SUPPORT
 CCOPTS_SHARED += -DDUK_CMDLINE_CONSOLE_SUPPORT
-CCOPTS_SHARED += -DDUK_CMDLINE_LOGGING_SUPPORT
-CCOPTS_SHARED += -DDUK_CMDLINE_MODULE_SUPPORT
+CCOPTS_SHARED += -UDUK_CMDLINE_LOGGING_SUPPORT
+CCOPTS_SHARED += -UDUK_CMDLINE_MODULE_SUPPORT
 ifdef SYSTEMROOT  # Windows
 # Skip fancy (linenoise)
 else
-CCOPTS_SHARED += -DDUK_CMDLINE_FANCY
+CCOPTS_SHARED += -UDUK_CMDLINE_FANCY
 #CCOPTS_SHARED += -DDUK_CMDLINE_PTHREAD_STACK_CHECK
 endif
-CCOPTS_SHARED += -DDUK_CMDLINE_ALLOC_LOGGING
-CCOPTS_SHARED += -DDUK_CMDLINE_ALLOC_TORTURE
-CCOPTS_SHARED += -DDUK_CMDLINE_ALLOC_HYBRID
-CCOPTS_SHARED += -DDUK_CMDLINE_DEBUGGER_SUPPORT
-CCOPTS_SHARED += -DDUK_CMDLINE_FILEIO
+CCOPTS_SHARED += -UDUK_CMDLINE_ALLOC_LOGGING
+CCOPTS_SHARED += -UDUK_CMDLINE_ALLOC_TORTURE
+CCOPTS_SHARED += -UDUK_CMDLINE_ALLOC_HYBRID
+CCOPTS_SHARED += -UDUK_CMDLINE_DEBUGGER_SUPPORT
+CCOPTS_SHARED += -UDUK_CMDLINE_FILEIO
 
 CCOPTS_SHARED += -D_POSIX_C_SOURCE=200809L  # to avoid linenoise strdup() warnings
 CCOPTS_SHARED += -pedantic -ansi -std=c99 -fstrict-aliasing
@@ -135,14 +135,14 @@ CCOPTS_SHARED += -Wsuggest-attribute=noreturn
 CCOPTS_SHARED += -fmax-errors=3  # prevent floods of errors if e.g. parenthesis missing
 CCOPTS_SHARED += -I./linenoise
 CCOPTS_SHARED += -I./examples/cmdline
-CCOPTS_SHARED += -I./examples/alloc-logging
-CCOPTS_SHARED += -I./examples/alloc-torture
-CCOPTS_SHARED += -I./examples/alloc-hybrid
-CCOPTS_SHARED += -I./examples/debug-trans-socket
+#CCOPTS_SHARED += -I./examples/alloc-logging
+#CCOPTS_SHARED += -I./examples/alloc-torture
+#CCOPTS_SHARED += -I./examples/alloc-hybrid
+#CCOPTS_SHARED += -I./examples/debug-trans-socket
 CCOPTS_SHARED += -I./extras/print-alert
 CCOPTS_SHARED += -I./extras/console
-CCOPTS_SHARED += -I./extras/logging
-CCOPTS_SHARED += -I./extras/module-duktape
+#CCOPTS_SHARED += -I./extras/logging
+#CCOPTS_SHARED += -I./extras/module-duktape
 #CCOPTS_SHARED += -m32   # force 32-bit compilation on a 64-bit host
 #CCOPTS_SHARED += -mx32  # force X32 compilation on a 64-bit host
 #CCOPTS_SHARED += -fstack-usage  # enable manually, then e.g. $ make clean duk; python util/pretty_stack_usage.py duktape.su
@@ -168,11 +168,11 @@ GXXOPTS_NONDEBUG += -I./examples/alloc-logging -I./examples/alloc-torture -I./ex
 GXXOPTS_DEBUG = $(GXXOPTS_SHARED) -O0 -g -ggdb
 GXXOPTS_DEBUG += -I./examples/alloc-logging -I./examples/alloc-torture -I./examples/alloc-hybrid -I./extras/print-alert -I./extras/console -I./extras/logging -I./extras/module-duktape
 
-CCOPTS_DUKLOW = -m32
+#CCOPTS_DUKLOW = -m32
 CCOPTS_DUKLOW += -flto -fno-asynchronous-unwind-tables -ffunction-sections -Wl,--gc-sections
 #CCOPTS_DUKLOW += '-fpack-struct=1'
 CCOPTS_DUKLOW += -Wno-unused-parameter -Wno-pedantic -Wno-sign-compare -Wno-missing-field-initializers -Wno-unused-result
-CCOPTS_DUKLOW += -UDUK_CMDLINE_FANCY -DDUK_CMDLINE_LOWMEM -D_POSIX_C_SOURCE=200809L
+CCOPTS_DUKLOW += -UDUK_CMDLINE_FANCY -UDUK_CMDLINE_LOWMEM -D_POSIX_C_SOURCE=200809L
 CCOPTS_DUKLOW += -UDUK_CMDLINE_LOGGING_SUPPORT  # extras/logger init writes to Duktape.Logger, problem with ROM build
 CCOPTS_DUKLOW += -UDUK_CMDLINE_MODULE_SUPPORT  # extras/module-duktape init writes to Duktape.Logger, problem with ROM build
 CCOPTS_DUKLOW += -UDUK_CMDLINE_CONSOLE_SUPPORT
diff --git a/examples/cmdline/duk_cmdline.c b/examples/cmdline/duk_cmdline.c
index 6b3d795..e0c47f3 100644
--- a/examples/cmdline/duk_cmdline.c
+++ b/examples/cmdline/duk_cmdline.c
@@ -52,6 +52,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <sys/prctl.h>
 #if defined(DUK_CMDLINE_SIGNAL)
 #include <signal.h>
 #endif
@@ -108,7 +109,7 @@
 static int main_argc = 0;
 static char **main_argv = NULL;
 static int interactive_mode = 0;
-static int allow_bytecode = 0;
+static int allow_bytecode = 1;
 #if defined(DUK_CMDLINE_DEBUGGER_SUPPORT)
 static int debugger_reattach = 0;
 #endif
@@ -121,8 +122,12 @@ int duk_cmdline_stack_check(void);
 /*
  *  Misc helpers
  */
+static void print_ver_for_iptv(void) {
+	printf("VER_FOR_IPTV: 6\n");
+}
 
 static void print_greet_line(void) {
+	print_ver_for_iptv();
 	printf("((o) Duktape%s %d.%d.%d (%s)\n",
 #if defined(DUK_CMDLINE_LINENOISE)
 	       " [linenoise]",
@@ -182,6 +187,7 @@ static void cmdline_fatal_handler(void *udata, const char *msg) {
 	fprintf(stderr, "*** FATAL ERROR: %s\n", msg ? msg : "no message");
 	fprintf(stderr, "Causing intentional segfault...\n");
 	fflush(stderr);
+	exit(1);
 	*((volatile unsigned int *) 0) = (unsigned int) 0xdeadbeefUL;
 	abort();
 }
@@ -1248,6 +1254,58 @@ static void destroy_duktape_heap(duk_context *ctx, int alloc_provider) {
 /*
  *  Main
  */
+#include <sys/time.h>
+#include <sys/resource.h>
+#include <signal.h>
+
+static void timer_handler (int signum)
+{
+    perror("Time limit exceeded!\n");
+    exit(2);
+    *((volatile unsigned int *) 0) = (unsigned int) 0xdeadbeefUL;
+    abort();
+}
+
+static void set_limits_exec_time(int timeSec)
+{
+    struct itimerval it_val;
+
+    if (signal(SIGALRM, (void (*)(int)) timer_handler) == SIG_ERR)
+    {
+        perror("Unable to catch SIGALRM");
+        exit(1);
+    }
+
+    it_val.it_value.tv_sec  = timeSec;
+    it_val.it_value.tv_usec = 0;
+    it_val.it_interval = it_val.it_value;
+
+    if (setitimer(ITIMER_REAL, &it_val, NULL) == -1)
+    {
+        perror("error calling setitimer()");
+        exit(1);
+    }
+}
+
+static void set_limits(int timeSec, int memMB)
+{
+    struct rlimit rl;
+    if (memMB > 0)
+    {
+        rl.rlim_cur = (rlim_t )(memMB * 1024 * 1024);
+        rl.rlim_max = (rlim_t )(memMB * 1024 * 1024);
+        setrlimit(RLIMIT_AS, &rl);
+    }
+
+    if (timeSec > 0)
+    {
+        rl.rlim_cur = (rlim_t )(timeSec);
+        rl.rlim_max = (rlim_t )(timeSec);
+        setrlimit(RLIMIT_CPU, &rl);
+
+        set_limits_exec_time(timeSec);
+    }
+}
 
 int main(int argc, char *argv[]) {
 	duk_context *ctx = NULL;
@@ -1265,10 +1323,15 @@ int main(int argc, char *argv[]) {
 	int run_stdin = 0;
 	const char *compile_filename = NULL;
 	int i;
+	int timeSec = 15;
+	int memMB   = 10;
 
 	main_argc = argc;
 	main_argv = (char **) argv;
 
+	// make sure to kill myself when parent dies
+	prctl(PR_SET_PDEATHSIG, SIGKILL);
+
 #if defined(EMSCRIPTEN)
 	/* Try to use NODEFS to provide access to local files.  Mount the
 	 * CWD as /working, and then prepend "/working/" to relative native
@@ -1353,6 +1416,18 @@ int main(int argc, char *argv[]) {
 			}
 			i++;
 			compile_filename = argv[i];
+		} else if (strcmp(arg, "-m") == 0) {
+			if (i == argc - 1) {
+				goto usage;
+			}
+			i++;
+			memMB = atoi(argv[i]);
+		} else if (strcmp(arg, "-t") == 0) {
+			if (i == argc - 1) {
+				goto usage;
+			}
+			i++;
+			timeSec = atoi(argv[i]);
 		} else if (strcmp(arg, "-e") == 0) {
 			have_eval = 1;
 			if (i == argc - 1) {
@@ -1400,17 +1475,9 @@ int main(int argc, char *argv[]) {
 	}
 
 	/*
-	 *  Memory limit
+	 *  Set memory limit and time limits
 	 */
-
-#if defined(DUK_CMDLINE_RLIMIT)
-	set_resource_limits(memlimit_high ? MEM_LIMIT_HIGH : MEM_LIMIT_NORMAL);
-#else
-	if (memlimit_high == 0) {
-		fprintf(stderr, "Warning: option --restrict-memory ignored, no rlimit support\n");
-		fflush(stderr);
-	}
-#endif
+	set_limits(timeSec, memMB);
 
 	/*
 	 *  Create heap
@@ -1441,6 +1508,12 @@ int main(int argc, char *argv[]) {
 		} else if (strlen(arg) == 2 && strcmp(arg, "-c") == 0) {
 			i++;  /* skip filename */
 			continue;
+		} else if (strlen(arg) == 2 && strcmp(arg, "-m") == 0) {
+			i++;
+			continue;
+		} else if (strlen(arg) == 2 && strcmp(arg, "-t") == 0) {
+			i++;
+			continue;
 		} else if (strlen(arg) >= 1 && arg[0] == '-') {
 			continue;
 		}
@@ -1524,10 +1597,13 @@ int main(int argc, char *argv[]) {
 	 */
 
  usage:
+	print_greet_line();
 	fprintf(stderr, "Usage: duk [options] [<filenames>]\n"
 	                "\n"
 	                "   -i                 enter interactive mode after executing argument file(s) / eval code\n"
 	                "   -e CODE            evaluate code\n"
+                        "   -t time            maximum script execution time(in seconds 0, for no timelimit), default: 15 sec,\n"
+                        "   -m memory          maximum script RAM memory usage(in MB, 0 for no memlimit), default: 10MB,\n"
 	                "   -c FILE            compile into bytecode and write to FILE (use with only one file argument)\n"
 	                "   -b                 allow bytecode input files (memory unsafe for invalid bytecode)\n"
 	                "   --run-stdin        treat stdin like a file, i.e. compile full input (not line by line)\n"
